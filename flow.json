[
    {
        "id": "f1ebcf53c9a8918a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5f88193e39059cec",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9995b4c2.8d8f68",
        "type": "tab",
        "label": "Weather",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b2f10bda7f8d90dd",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e513320434ce4141",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "42680cdcac131498",
        "type": "mqtt-broker",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "broker": "iotmind.ddns.net",
        "port": "16766",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "56e1422eec5605d6",
        "type": "MySQLdatabase",
        "name": "",
        "host": "172.19.0.4",
        "port": "3306",
        "db": "tSeriesDB",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "f50efa270486f1e1",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "_internal",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "eeb221fb.ab27f",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "demo",
        "name": "test",
        "usetls": true,
        "tls": "d50d0c9f.31e858",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "ae5dda751445e46a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "test 1.8 flux",
        "usetls": false,
        "tls": "d50d0c9f.31e858",
        "influxdbVersion": "1.x",
        "url": "https://localhost:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "6346b608.d007a8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "tls": "b8b3702c.204cf",
        "clientid": "node-red",
        "usetls": true,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "431de4da.f1905c",
        "type": "MySQLdatabase",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "tSeriesDB",
        "tz": ""
    },
    {
        "id": "e1e7f196.0f02f",
        "type": "tls-config",
        "name": "www.in24hrs.xyz",
        "cert": "/etc/letsencrypt/live/www.in24hrs.xyz/cert.pem",
        "key": "/etc/letsencrypt/live/www.in24hrs.xyz/privkey.pem",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true
    },
    {
        "id": "b8b3702c.204cf",
        "type": "tls-config",
        "name": "www.in24hrs.xyz",
        "cert": "/etc/letsencrypt/live/www.in24hrs.xyz/cert.pem",
        "key": "/etc/letsencrypt/live/www.in24hrs.xyz/privkey.pem",
        "ca": "",
        "verifyservercert": true
    },
    {
        "id": "61851973.070538",
        "type": "twilio-api",
        "name": "myTwilio",
        "sid": "your-twilio-sid",
        "from": "your-twilio-number"
    },
    {
        "id": "126a9185ab11d169",
        "type": "inject",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "df9f4de18c550ccc",
                "822207c9adbdb39e"
            ]
        ]
    },
    {
        "id": "df9f4de18c550ccc",
        "type": "debug",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 160,
        "wires": []
    },
    {
        "id": "14a98c5cab82c3f1",
        "type": "mqtt out",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "42680cdcac131498",
        "x": 650,
        "y": 200,
        "wires": []
    },
    {
        "id": "73c9012888e75379",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/pub/:topic/:payload",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "9fe8e6b87b84f073"
            ]
        ]
    },
    {
        "id": "9fe8e6b87b84f073",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create message",
        "func": "// create meassage\nmsg.topic = msg.req.params.topic;\nmsg.payload = msg.req.params.payload;\nmsg.qos = 2\nmsg.retain = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            [
                "caa07c405380585b",
                "14a98c5cab82c3f1"
            ]
        ]
    },
    {
        "id": "caa07c405380585b",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create response",
        "func": "// create response\nmsg.payload = {\n    success: true,\n    message: \"published \" +\n             msg.req.params.topic +\n             \"/\" +\n             msg.req.params.payload\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 260,
        "wires": [
            [
                "44826955170c7592"
            ]
        ]
    },
    {
        "id": "44826955170c7592",
        "type": "http response",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 260,
        "wires": []
    },
    {
        "id": "9378567f25fb7937",
        "type": "mqtt in",
        "z": "f1ebcf53c9a8918a",
        "name": "listen everything",
        "topic": "#",
        "qos": "2",
        "datatype": "auto",
        "broker": "42680cdcac131498",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 360,
        "wires": [
            [
                "c58a094fea57d71a"
            ]
        ]
    },
    {
        "id": "0d40fa7a07af59c6",
        "type": "comment",
        "z": "f1ebcf53c9a8918a",
        "name": "REST API Message Publisher",
        "info": "",
        "x": 200,
        "y": 220,
        "wires": []
    },
    {
        "id": "c0e70fd1fee86736",
        "type": "comment",
        "z": "f1ebcf53c9a8918a",
        "name": "Creating the Database Listener",
        "info": "",
        "x": 210,
        "y": 320,
        "wires": []
    },
    {
        "id": "406a96456da57589",
        "type": "debug",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "c58a094fea57d71a",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create query",
        "func": "// create query\n// get microtime\nvar timestamp = new Date().getTime()/1000;\n// pad it with trailing zeroes\ntimestamp = timestamp.toString() + \"000\";\n// trim to exact length 10 + 1 + 3\ntimestamp = timestamp.substring(0,14)\nvar strQuery = \"INSERT INTO thingData (topic, payload, timestamp, deleted) \\\nVALUES ('\" + escape(msg.topic) + \"','\" + escape(msg.payload) + \"','\" +\ntimestamp + \"', 0);\";\nmsg.topic = strQuery;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 360,
        "wires": [
            [
                "e09033fad9e5848a"
            ]
        ]
    },
    {
        "id": "fc23fbea86939aec",
        "type": "comment",
        "z": "f1ebcf53c9a8918a",
        "name": "REST API Message Retriever",
        "info": "",
        "x": 200,
        "y": 440,
        "wires": []
    },
    {
        "id": "41526581ad79b771",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/get/:topic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "8d4b47df394c00fd"
            ]
        ]
    },
    {
        "id": "8188651eed159068",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/get/:topic/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "8d4b47df394c00fd"
            ]
        ]
    },
    {
        "id": "8d4b47df394c00fd",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create query",
        "func": "// Create query\n// if required record count is not specified\n// set default to 1\nif(!msg.req.params.count)\n    msg.req.params.count = 1;\n// build the sql query\nmsg.topic = \"SELECT id,topic,payload,timestamp \" +\n            \"FROM thingData \" +\n            \"WHERE topic='\" + escape(msg.req.params.topic) + \"' \" +\n            \"AND deleted=0 \" +\n            \"ORDER BY id DESC \" +\n            \"LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 520,
        "wires": [
            [
                "a15488aeb159f78c"
            ]
        ]
    },
    {
        "id": "eaaf48709929c373",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "prepare response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 520,
        "wires": [
            [
                "d77ef1ac1a2591d1"
            ]
        ]
    },
    {
        "id": "d77ef1ac1a2591d1",
        "type": "http response",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 520,
        "wires": []
    },
    {
        "id": "802ed121d82e8142",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/get/topicLike/:topic/payloadLike/:payload/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 640,
        "wires": [
            [
                "427a616d5e6d5304"
            ]
        ]
    },
    {
        "id": "427a616d5e6d5304",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create query",
        "func": "// Create query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n    msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wilcard character %\nmsg.topic = \"SELECT id,topic,payload,timestamp\" +\n            \" FROM thingData WHERE\" +\n            \" topic LIKE '\" + msg.req.params.topic.replace(/\\*/g, \"%\") + \"'\" +\n            \" AND\" +\n            \" payload LIKE '\" + msg.req.params.payload.replace(/\\*/g, \"%\") + \"'\" +\n            \" AND deleted=0\" +\n            \" AND (\" + msg.req.authFilter + \")\" +\n            \" ORDER BY ID DESC\" +\n            \" LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 640,
        "wires": [
            [
                "2feefc15bf28401e"
            ]
        ]
    },
    {
        "id": "6265e8e9efbd48fc",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "prepare response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 640,
        "wires": [
            [
                "fc78f21a5b1bf8fd"
            ]
        ]
    },
    {
        "id": "fc78f21a5b1bf8fd",
        "type": "http response",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 640,
        "wires": []
    },
    {
        "id": "9ab50c62e1803479",
        "type": "comment",
        "z": "f1ebcf53c9a8918a",
        "name": "Data Access APIs",
        "info": "",
        "x": 160,
        "y": 600,
        "wires": []
    },
    {
        "id": "9fbbb779bc8825c4",
        "type": "comment",
        "z": "f1ebcf53c9a8918a",
        "name": "Adding Time-Based Filters",
        "info": "",
        "x": 190,
        "y": 680,
        "wires": []
    },
    {
        "id": "1fc72723141e8f1c",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/get/:topic/after/:time/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 740,
        "wires": [
            [
                "086dc4c90fece694"
            ]
        ]
    },
    {
        "id": "a548d4ea1570d777",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/get/:topic/before/:time/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 780,
        "wires": [
            [
                "b0ad018e5240a5e0"
            ]
        ]
    },
    {
        "id": "a608c3018238fd07",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/get/:topic/during/:start/:end/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 820,
        "wires": [
            [
                "9765fc999f2887a2"
            ]
        ]
    },
    {
        "id": "086dc4c90fece694",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create 'AFTER' query",
        "func": "// Create 'AFTER' query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n    msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wilcard character %\nmsg.topic = \"SELECT id,topic,payload,timestamp\" +\n            \" FROM thingData WHERE\" +\n            \" topic LIKE '\" + msg.req.params.topic.replace(/\\*/g, \"%\") + \"'\" +\n            \" AND\" +\n            // \" payload LIKE '\" + msg.req.params.payload.replace(/\\*/g, \"%\") + \"'\" +\n            \" timestamp >= '\" + msg.req.params.time + \"'\" + \n            \" AND deleted=0\" +\n            \" AND (\" + msg.req.authFilter + \")\" +\n            \" ORDER BY ID DESC\" +\n            \" LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 740,
        "wires": [
            [
                "8009ae70d591daf6"
            ]
        ]
    },
    {
        "id": "b0ad018e5240a5e0",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create 'BEFORE' query",
        "func": "// Create 'BEFORE' query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n    msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wilcard character %\nmsg.topic = \"SELECT id,topic,payload,timestamp\" +\n            \" FROM thingData WHERE\" +\n            \" topic LIKE '\" + msg.req.params.topic.replace(/\\*/g, \"%\") + \"'\" +\n            \" AND\" +\n            // \" payload LIKE '\" + msg.req.params.payload.replace(/\\*/g, \"%\") + \"'\" +\n            \" timestamp <= '\" + msg.req.params.time + \"'\" +\n            \" AND deleted=0\" +\n            \" AND (\" + msg.req.authFilter + \")\" +\n            \" ORDER BY ID DESC\" +\n            \" LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 780,
        "wires": [
            [
                "8009ae70d591daf6"
            ]
        ]
    },
    {
        "id": "9765fc999f2887a2",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create 'DURING' query",
        "func": "// Create 'DURING' query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n    msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wilcard character %\nmsg.topic = \"SELECT id,topic,payload,timestamp\" +\n            \" FROM thingData WHERE\" +\n            \" topic LIKE '\" + msg.req.params.topic.replace(/\\*/g, \"%\") + \"'\" +\n            \" AND\" +\n            // \" payload LIKE '\" + msg.req.params.payload.replace(/\\*/g, \"%\") + \"'\" +\n            \" timestamp >= '\" + msg.req.params.start + \"'\" +\n            \" AND\" +\n            \" timestamp <= '\" + msg.req.params.end + \"'\" +\n            \" AND deleted=0\" +\n            \" AND (\" + msg.req.authFilter + \")\" +\n            \" ORDER BY ID DESC\" +\n            \" LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 820,
        "wires": [
            [
                "8009ae70d591daf6"
            ]
        ]
    },
    {
        "id": "d69bc506628d3b2c",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "prepare response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 780,
        "wires": [
            [
                "a5102f0f9f5868e5"
            ]
        ]
    },
    {
        "id": "a5102f0f9f5868e5",
        "type": "http response",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 780,
        "wires": []
    },
    {
        "id": "dc4970cb8b6e6f45",
        "type": "comment",
        "z": "f1ebcf53c9a8918a",
        "name": "Data Deletion APIs",
        "info": "",
        "x": 170,
        "y": 880,
        "wires": []
    },
    {
        "id": "0a3721495968d6d7",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/delete/:topic/id/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 940,
        "wires": [
            [
                "cb57e5e2600f7056"
            ]
        ]
    },
    {
        "id": "09fa612e8fc70fa6",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/delete/:topic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 980,
        "wires": [
            [
                "75301b0772907ef5"
            ]
        ]
    },
    {
        "id": "e58c3bf3993b0f8d",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/delete/:topic/first/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1020,
        "wires": [
            [
                "ad8d37936186db6c"
            ]
        ]
    },
    {
        "id": "fac6ee4ec450bf0b",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/delete/:topic/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1060,
        "wires": [
            [
                "5bb78903f78ca750"
            ]
        ]
    },
    {
        "id": "cb57e5e2600f7056",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create query",
        "func": "// Create query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n    msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wilcard character %\nmsg.topic = \"UPDATE thingData\" +\n            \" SET deleted=1\" +\n            \" WHERE\" +\n            \" topic='\" + msg.req.params.topic + \"'\" +\n            \" AND (\" + msg.req.authFilter + \")\" +\n            \" AND id=\" + msg.req.params.id + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 940,
        "wires": [
            [
                "6f3c7207a8415682"
            ]
        ]
    },
    {
        "id": "75301b0772907ef5",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create query",
        "func": "// Create query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n    msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wilcard character %\nmsg.topic = \"UPDATE thingData\" +\n            \" SET deleted=1\" +\n            \" WHERE\" +\n            \" topic='\" + msg.req.params.topic + \"'\" +\n            \" AND (\" + msg.req.authFilter + \");\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 980,
        "wires": [
            [
                "6f3c7207a8415682"
            ]
        ]
    },
    {
        "id": "ad8d37936186db6c",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create query",
        "func": "// Create query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.params.count)\n    msg.req.params.count = 1;\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n    msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wilcard character %\nmsg.topic = \"DELETE thingData\" +\n            \" WHERE deleted=1\" +\n            \" AND\" +\n            \" topic='\" + msg.req.params.topic + \"'\" +\n            \" AND (\" + msg.req.authFilter + \")\" +\n            \" ORDER BY id ASC LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "6f3c7207a8415682"
            ]
        ]
    },
    {
        "id": "5bb78903f78ca750",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "create query",
        "func": "// Create query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.params.count)\n    msg.req.params.count = 1;\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n    msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wilcard character %\nmsg.topic = \"DELETE thingData\" +\n            \" WHERE deleted=1\" +\n            \" AND\" +\n            \" topic='\" + msg.req.params.topic + \"'\" +\n            \" AND (\" + msg.req.authFilter + \")\" +\n            \" ORDER BY id DESC LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1060,
        "wires": [
            [
                "6f3c7207a8415682"
            ]
        ]
    },
    {
        "id": "fe3171a261d2faee",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "prepare response",
        "func": "// Prepare response\nmsg.payload = {\n    \"found\": msg.payload.affectedRows,\n    \"changed\": msg.payload.changedRows,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1000,
        "wires": [
            [
                "828923914d20ee50"
            ]
        ]
    },
    {
        "id": "828923914d20ee50",
        "type": "http response",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 1000,
        "wires": []
    },
    {
        "id": "461469c835771760",
        "type": "comment",
        "z": "f1ebcf53c9a8918a",
        "name": "Getting the Current Timestamp",
        "info": "",
        "x": 210,
        "y": 1120,
        "wires": []
    },
    {
        "id": "cd809174ea9c1f8e",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/timestamp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "843ad43c628ece91"
            ]
        ]
    },
    {
        "id": "843ad43c628ece91",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "prepare timestamp",
        "func": "msg.payload = {\n    timestamp: (new Date()).getTime().toString()\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1160,
        "wires": [
            [
                "bac87dcd5a3ca2c1"
            ]
        ]
    },
    {
        "id": "bac87dcd5a3ca2c1",
        "type": "http response",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 1160,
        "wires": []
    },
    {
        "id": "10e1c7902d6d07be",
        "type": "comment",
        "z": "f1ebcf53c9a8918a",
        "name": "Random Code Generator",
        "info": "",
        "x": 190,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b979f8d840a46e45",
        "type": "http in",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "url": "/admin/randomcode/:len",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1260,
        "wires": [
            [
                "6045e11ac9e693ba"
            ]
        ]
    },
    {
        "id": "6045e11ac9e693ba",
        "type": "function",
        "z": "f1ebcf53c9a8918a",
        "name": "prepare random code",
        "func": "var randomString = function(length) {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\nmsg.payload = {\n    code: randomString(msg.req.params.len)\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1260,
        "wires": [
            [
                "d3309c37533113ed"
            ]
        ]
    },
    {
        "id": "d3309c37533113ed",
        "type": "http response",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e09033fad9e5848a",
        "type": "mysql",
        "z": "f1ebcf53c9a8918a",
        "mydb": "56e1422eec5605d6",
        "name": "",
        "x": 540,
        "y": 360,
        "wires": [
            [
                "406a96456da57589"
            ]
        ]
    },
    {
        "id": "a15488aeb159f78c",
        "type": "mysql",
        "z": "f1ebcf53c9a8918a",
        "mydb": "56e1422eec5605d6",
        "name": "",
        "x": 560,
        "y": 520,
        "wires": [
            [
                "eaaf48709929c373"
            ]
        ]
    },
    {
        "id": "2feefc15bf28401e",
        "type": "mysql",
        "z": "f1ebcf53c9a8918a",
        "mydb": "56e1422eec5605d6",
        "name": "",
        "x": 760,
        "y": 640,
        "wires": [
            [
                "6265e8e9efbd48fc"
            ]
        ]
    },
    {
        "id": "8009ae70d591daf6",
        "type": "mysql",
        "z": "f1ebcf53c9a8918a",
        "mydb": "56e1422eec5605d6",
        "name": "",
        "x": 800,
        "y": 780,
        "wires": [
            [
                "d69bc506628d3b2c"
            ]
        ]
    },
    {
        "id": "6f3c7207a8415682",
        "type": "mysql",
        "z": "f1ebcf53c9a8918a",
        "mydb": "56e1422eec5605d6",
        "name": "",
        "x": 660,
        "y": 1000,
        "wires": [
            [
                "fe3171a261d2faee"
            ]
        ]
    },
    {
        "id": "822207c9adbdb39e",
        "type": "mqtt out",
        "z": "f1ebcf53c9a8918a",
        "name": "",
        "topic": "timestamps",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "42680cdcac131498",
        "x": 410,
        "y": 80,
        "wires": []
    },
    {
        "id": "b5cc077116a3220c",
        "type": "influxdb in",
        "z": "5f88193e39059cec",
        "influxdb": "f50efa270486f1e1",
        "name": "",
        "query": "SELECT \"numMeasurements\" FROM \"database\"",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "0ec7051c39ed1ed3"
            ]
        ]
    },
    {
        "id": "0ec7051c39ed1ed3",
        "type": "debug",
        "z": "5f88193e39059cec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 120,
        "wires": []
    },
    {
        "id": "dd529870ce247102",
        "type": "inject",
        "z": "5f88193e39059cec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "b5cc077116a3220c"
            ]
        ]
    },
    {
        "id": "14c2de9cf5af5949",
        "type": "influxdb out",
        "z": "5f88193e39059cec",
        "influxdb": "f50efa270486f1e1",
        "name": "",
        "measurement": "variety",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 460,
        "y": 260,
        "wires": []
    },
    {
        "id": "f1ba1a3eba4caead",
        "type": "inject",
        "z": "5f88193e39059cec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "variety granny_smith=21.58,golden_delicious=20.9,fuji=22.67,gala=19.85,braeburn=22.1,total_weight=107.1 1529327100000000000",
        "payloadType": "str",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "14c2de9cf5af5949",
                "372c163c97c34e7e"
            ]
        ]
    },
    {
        "id": "372c163c97c34e7e",
        "type": "debug",
        "z": "5f88193e39059cec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 320,
        "wires": []
    },
    {
        "id": "39aa2ca9.804da4",
        "type": "debug",
        "z": "5f88193e39059cec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 550,
        "y": 400,
        "wires": []
    },
    {
        "id": "262a3923.e7b216",
        "type": "influxdb in",
        "z": "5f88193e39059cec",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "query": "SELECT * from test",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "my-org",
        "x": 330,
        "y": 400,
        "wires": [
            [
                "39aa2ca9.804da4"
            ]
        ]
    },
    {
        "id": "803d82f.ff80f8",
        "type": "inject",
        "z": "5f88193e39059cec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 400,
        "wires": [
            [
                "262a3923.e7b216"
            ]
        ]
    },
    {
        "id": "553866ebbac6db5a",
        "type": "influxdb out",
        "z": "5f88193e39059cec",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "measurement": "test",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 460,
        "y": 480,
        "wires": []
    },
    {
        "id": "077cc86a966a7247",
        "type": "function",
        "z": "5f88193e39059cec",
        "name": "single value",
        "func": "msg.payload = Math.random()*10;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 480,
        "wires": [
            [
                "553866ebbac6db5a"
            ]
        ]
    },
    {
        "id": "1e385a02b52a8398",
        "type": "inject",
        "z": "5f88193e39059cec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "077cc86a966a7247"
            ]
        ]
    },
    {
        "id": "436873f0390ab403",
        "type": "inject",
        "z": "5f88193e39059cec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "5eced11ef7884f23"
            ]
        ]
    },
    {
        "id": "5eced11ef7884f23",
        "type": "function",
        "z": "5f88193e39059cec",
        "name": "Fields",
        "func": "msg.payload = {\n    intValue: '12i',\n    numValue: 123.0,\n    strValue: \"message\",\n    randomValue: Math.random()*10\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 288,
        "y": 560,
        "wires": [
            [
                "ad42b6fa6364a5f0"
            ]
        ]
    },
    {
        "id": "ad42b6fa6364a5f0",
        "type": "influxdb out",
        "z": "5f88193e39059cec",
        "influxdb": "f50efa270486f1e1",
        "name": "",
        "measurement": "test2",
        "precision": "",
        "retentionPolicy": "",
        "database": "test",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 498,
        "y": 560,
        "wires": []
    },
    {
        "id": "3a8f1439.209bfc",
        "type": "inject",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "888db968.093858"
            ]
        ]
    },
    {
        "id": "888db968.093858",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.metaweather.com/api//location/search/?query=Hà Nội",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 370,
        "y": 300,
        "wires": [
            [
                "e759e5d1.1a92a8"
            ]
        ]
    },
    {
        "id": "e759e5d1.1a92a8",
        "type": "function",
        "z": "9995b4c2.8d8f68",
        "name": "Get woeid of city",
        "func": "// Get woeid of city\nvar a = JSON.parse(msg.payload);\nmsg.payload = a[0].latt_long;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 300,
        "wires": [
            [
                "c240839d0c2184b5"
            ]
        ]
    },
    {
        "id": "5e19d00a.47317",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.metaweather.com/api/location/{{ payload }}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 130,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "22640ab2.cff386",
        "type": "inject",
        "z": "9995b4c2.8d8f68",
        "name": "Create Database",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"q\":\"CREATE DATABASE abc\"}",
        "payloadType": "json",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "d25b5acd.31e488"
            ]
        ]
    },
    {
        "id": "d25b5acd.31e488",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "Create Database",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://influxdb:8086/query?q={{ payload.q }}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 370,
        "y": 60,
        "wires": [
            [
                "c5b508e6.2bd048"
            ]
        ]
    },
    {
        "id": "c5b508e6.2bd048",
        "type": "debug",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 60,
        "wires": []
    },
    {
        "id": "3eb7b084.82e2e",
        "type": "inject",
        "z": "9995b4c2.8d8f68",
        "name": "Drop Database",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"q\":\"DROP DATABASE abc\"}",
        "payloadType": "json",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "40004167.55c87"
            ]
        ]
    },
    {
        "id": "40004167.55c87",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "Drop Database",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://influxdb:8086/query?q={{ payload.q }}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 360,
        "y": 140,
        "wires": [
            [
                "63f5c43b.201f5c"
            ]
        ]
    },
    {
        "id": "63f5c43b.201f5c",
        "type": "debug",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "62ac9f2b.cc064",
        "type": "function",
        "z": "9995b4c2.8d8f68",
        "name": "Dump Data",
        "func": "// Convert to JSON\nfunction escape_string(string) {\n    return string.replace(/\\s/ig,'\\\\ ').replace(/\\,/g,'\\\\,').replace(/\\=/g,'\\\\ =');\n}\n\n// function escape_string(string) {\n//     return string;\n// }\n\n// msg.payload = escape_string(msg.payload.location_type);\n\nvar data = [];\n\nvar sun_rise = new Date(Date.parse(msg.payload.sun_rise)).getTime();\nvar sun_set = new Date(Date.parse(msg.payload.sun_set)).getTime();\n\nvar tags = [\n    `location_type=${escape_string(msg.payload.location_type)}`,\n    `title=${escape_string(msg.payload.title)}`,\n    `latt=${msg.payload.latt_long.split(',')[0]}`,\n    `long=${msg.payload.latt_long.split(',')[1]}`,\n    `country=${escape_string(msg.payload.parent.title)}`,\n    `timezone=${escape_string(msg.payload.timezone)}`\n];\n\n\n// msg.timestamp = timestamp.getTime();\n\n\nmsg.payload.consolidated_weather.forEach(element => {\n  var timestamp = new Date(Date.parse(element.created)).getTime();\n  for (var elem in element) {\n        if (elem === 'weather_state_name') {\n            var measure = elem;\n            // var value = escape_string(element[elem]);\n            var value = '\\\"' + element[elem].toString() + '\\\"';\n            data.push(`${measure},${tags.join(',')} value=${value} ${timestamp}`);\n            continue;\n        }\n        if (elem === 'wind_direction_compass') {\n            measure = elem;\n            // var value = escape_string(element[elem]);\n            value = '\\\"' + element[elem].toString() + '\\\"';\n            data.push(`${measure},${tags.join(',')} value=${value} ${timestamp}`);\n            continue;\n        }\n        if ( elem === 'id' || elem === 'weather_state_abbr') {\n          continue;\n        }\n        if (elem === 'created') {\n          continue;\n        }\n        if (elem === 'applicable_date') {\n            continue;\n        }\n        measure = elem;\n        value = element[elem];\n        data.push(`${measure},${tags.join(',')} value=${value} ${timestamp}`);\n  }\n});\n\nmsg.payload = data.join('\\n');\n// msg.payload = data;\nmsg.db = 'abc';\nmsg.precision = 'ms';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 420,
        "wires": [
            [
                "892a75f4.d6d118"
            ]
        ]
    },
    {
        "id": "39dc1e61.226f62",
        "type": "debug",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 220,
        "wires": []
    },
    {
        "id": "892a75f4.d6d118",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.39:8086/write?db={{db}}&precision={{precision}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 420,
        "wires": [
            [
                "b88431ea.7b28c"
            ]
        ]
    },
    {
        "id": "b88431ea.7b28c",
        "type": "debug",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 420,
        "wires": []
    },
    {
        "id": "24ccbff.c78f34",
        "type": "inject",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "cpu_load_short,host=server02,region=us-west value=0.55 1422568543702900257",
        "payloadType": "str",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "94c282c2.d8542"
            ]
        ]
    },
    {
        "id": "94c282c2.d8542",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "Add Database",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://influxdb:8086/write?db=abc&precision=ns",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 340,
        "y": 220,
        "wires": [
            [
                "39dc1e61.226f62"
            ]
        ]
    },
    {
        "id": "308ec68a.21c22a",
        "type": "debug",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 660,
        "wires": []
    },
    {
        "id": "27df3d09.1cf012",
        "type": "function",
        "z": "9995b4c2.8d8f68",
        "name": "Sunset-Sunrise",
        "func": "function escape_string(string) {\n    return string.replace(/\\s/ig,'\\\\ ').replace(/\\,/g,'\\\\,').replace(/\\=/g,'\\\\ =');\n}\n\nvar sun_rise = new Date(Date.parse(msg.payload.sun_rise)).getTime();\nvar sun_set = new Date(Date.parse(msg.payload.sun_set)).getTime();\nvar timestamp = new Date(Date.parse(msg.payload.time)).getTime();\nvar data = [];\n\nvar tags = [\n    `location_type=${escape_string(msg.payload.location_type)}`,\n    `title=${escape_string(msg.payload.title)}`,\n    `latt=${msg.payload.latt_long.split(',')[0]}`,\n    `long=${msg.payload.latt_long.split(',')[1]}`,\n    `country=${escape_string(msg.payload.parent.title)}`,\n    `timezone=${escape_string(msg.payload.timezone)}`\n];\n\nvar measure = 'sun_rise';\nvalue = sun_rise;\ndata.push(`${measure},${tags.join(',')} value=${value} ${timestamp}`);\nmeasure = 'sun_set';\nvalue = sun_set;\ndata.push(`${measure},${tags.join(',')} value=${value} ${timestamp}`);\n\nmsg.payload = data.join('\\n');\nmsg.db = 'abc';\nmsg.precision = 'ms';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 140,
        "y": 660,
        "wires": [
            [
                "905a12ec.25572"
            ]
        ]
    },
    {
        "id": "905a12ec.25572",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.39:8086/write?db={{db}}&precision={{precision}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 370,
        "y": 660,
        "wires": [
            [
                "308ec68a.21c22a"
            ]
        ]
    },
    {
        "id": "9553bdae.5faf9",
        "type": "inject",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "d716955.7fb1568"
            ]
        ]
    },
    {
        "id": "d716955.7fb1568",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.metaweather.com/api/location/search/?query=Ho Chi Minh",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 310,
        "y": 520,
        "wires": [
            [
                "703edfd0.c84f9"
            ]
        ]
    },
    {
        "id": "703edfd0.c84f9",
        "type": "function",
        "z": "9995b4c2.8d8f68",
        "name": "Get woeid of city",
        "func": "// Get woeid of city\nvar a = JSON.parse(msg.payload);\nmsg.payload = a[0].woeid;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "5cb54a44.98cfa4"
            ]
        ]
    },
    {
        "id": "5cb54a44.98cfa4",
        "type": "http request",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www.metaweather.com/api/location/{{ payload }}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 710,
        "y": 520,
        "wires": [
            [
                "27df3d09.1cf012"
            ]
        ]
    },
    {
        "id": "c240839d0c2184b5",
        "type": "debug",
        "z": "9995b4c2.8d8f68",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 360,
        "wires": []
    },
    {
        "id": "b5ed0a34f785e045",
        "type": "inject",
        "z": "b2f10bda7f8d90dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2bec332306436820",
        "type": "random",
        "z": "b2f10bda7f8d90dd",
        "name": "",
        "low": 1,
        "high": 10,
        "inte": "true",
        "property": "sensor",
        "x": 320,
        "y": 120,
        "wires": [
            [
                "333c4eba2b7faeba"
            ]
        ]
    },
    {
        "id": "333c4eba2b7faeba",
        "type": "function",
        "z": "b2f10bda7f8d90dd",
        "name": "condition",
        "func": "var sensor=msg.sensor\nif(sensor>=5)\n{\n    msg.payload=\n    {\n        numValue:sensor,\n        strValue:\"high\",\n        valveCond:0\n    }\n}\nelse if(sensor<55)\n{\n    msg.payload=\n    {\n        numValue:sensor,\n        strValue:\"low\",\n        valveCond:1\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "5a99706de3043092",
        "type": "debug",
        "z": "b2f10bda7f8d90dd",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 120,
        "wires": []
    },
    {
        "id": "1fd795199249e9ed",
        "type": "influxdb out",
        "z": "b2f10bda7f8d90dd",
        "influxdb": "f50efa270486f1e1",
        "name": "",
        "measurement": "testDuy",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 770,
        "y": 60,
        "wires": []
    },
    {
        "id": "921d76e31d517895",
        "type": "inject",
        "z": "b2f10bda7f8d90dd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temp\":80,\"hum\":60}",
        "payloadType": "json",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "5a99706de3043092"
            ]
        ]
    },
    {
        "id": "806dc2af2dd7b00f",
        "type": "debug",
        "z": "e513320434ce4141",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 140,
        "wires": []
    },
    {
        "id": "d023ad6f1f88ef9d",
        "type": "influxdb in",
        "z": "e513320434ce4141",
        "influxdb": "eeb221fb.ab27f",
        "name": "",
        "query": "SELECT * from demo",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "my-org",
        "x": 360,
        "y": 140,
        "wires": [
            [
                "806dc2af2dd7b00f"
            ]
        ]
    },
    {
        "id": "e497749f349bbb34",
        "type": "inject",
        "z": "e513320434ce4141",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "d023ad6f1f88ef9d"
            ]
        ]
    },
    {
        "id": "e662669e1efa0c9a",
        "type": "influxdb in",
        "z": "e513320434ce4141",
        "influxdb": "f50efa270486f1e1",
        "name": "",
        "query": "create database demo",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 420,
        "y": 60,
        "wires": [
            [
                "cfe1d049fdf13769"
            ]
        ]
    },
    {
        "id": "11e74c6479749fb8",
        "type": "inject",
        "z": "e513320434ce4141",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "e662669e1efa0c9a"
            ]
        ]
    },
    {
        "id": "cfe1d049fdf13769",
        "type": "debug",
        "z": "e513320434ce4141",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 60,
        "wires": []
    }
]